{"version":3,"sources":["components/Navbar.js","components/About.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode2","role","aria-checked","htmlFor","toggleMode","About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","style1","setStyle1","_useState3","_useState4","btnText","setBtnText","style","aria-labelledby","data-bs-parent","Textform","text","setText","Fragment","heading","value","onChange","event","target","rows","upText","toUpperCase","showAlert","buttonText","toLowerCase","buttonText2","trim","buttonText3","buttonText4","split","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","components_Alert","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e4ce5fdb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-${props.mode} navbar-expand-lg bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch mx-4 ${props.mode === 'light'?'dark':'ligth'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode2} type=\"checkbox\" role=\"switch\" aria-checked=\"false\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Gray Mode</label>\r\n          </div>\r\n          <div className={`form-check form-switch ${props.mode === 'light'?'dark':'ligth'}`}>\r\n            <input className=\"form-check-input \" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"false\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Default-Title\",\r\n  aboutText: \"Default-About\"\r\n}","import React, { useState } from 'react'\r\nexport default function About() {\r\n\r\n    const [style1, setStyle1] = useState ({\r\n        color : 'whitesmoke',\r\n        backgroundColor : '#171717'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState('Light Mode')\r\n\r\n    const toggleStyle = ()=>{\r\n        if(style1.color === 'white'){\r\n            setStyle1({\r\n                color : 'black',\r\n                backgroundColor : 'whitesmoke'\r\n            })\r\n            setBtnText('Dark Mode');\r\n        }\r\n        else{\r\n            setStyle1({\r\n                color : 'white',\r\n                backgroundColor : '#171717'\r\n            })\r\n            setBtnText('Light Mode')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\" style={style1}>\r\n                <h1 className='my-3'>About us</h1>\r\n                <div className=\"accordion\"  id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\"  id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={style1}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={style1}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={style1} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={style1}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-4\">\r\n                <button onClick={toggleStyle} type='button' className=\"btn darkBtn btn-dark\" id='darkBtn'>{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    /*function handleClick will be set in (onClick) of button it will change text into upperCase*/\r\n    const handleClick = () => {\r\n        // console.log('uppercase was clicked' + text);\r\n        let upText = text.toUpperCase();\r\n        setText(upText);\r\n        props.showAlert('converted to \"Uppercase\"', 'success')\r\n    }\r\n    // converts string into lowercase\r\n    const handleClick2 = () => {\r\n        // console.log('lowercase was clicked' + text);\r\n        let upText = text.toLowerCase();\r\n        setText(upText);\r\n        props.showAlert('converted to \"Lowercase\"', 'success')\r\n    }\r\n\r\n    // trims spaces from string\r\n    const handleClick3 = () => {\r\n        // console.log('Trim Spaces was clicked' + text);\r\n        let upText = text.trim();\r\n        setText(upText);\r\n        props.showAlert('\"Trimmed\" Extra space from starting and ending of text', 'success')\r\n    }\r\n\r\n    // clear(delete) string\r\n    const handleClick4 = () => {\r\n        // console.log('Clear Text was clicked' + text);\r\n        let upText = \"\";\r\n        setText(upText);\r\n        props.showAlert('text is \"Cleared\"', 'success')\r\n    }\r\n\r\n    /* function(handleChange) will be set in (onChange) of textarea textarea contains(value = text) function will change that value by using event parameter*/\r\n    const handleChange = (event) => {\r\n        // console.log(event.target.value);\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; -> wrong way to change text value\r\n    // setText(\"new text\"); -> correct way to change text value\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <h3 className='my-3'>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{backgroundColor : (props.mode === 'light'?'white':'#22303c00'),color : (props.mode === 'light'?'black':'whitesmoke')}} id=\"exampleFormControlTextarea1\" value={text} onChange={handleChange} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.mode === 'light'?'dark':'primary'} mx-3`} onClick={handleClick} >{props.buttonText}</button>\r\n                <button className={`btn btn-${props.mode === 'light'?'dark':'primary'} mx-3`} onClick={handleClick2} >{props.buttonText2}</button>\r\n                <button className={`btn btn-${props.mode === 'light'?'dark':'primary'} mx-3`} onClick={handleClick3} >{props.buttonText3}</button>\r\n                <button className={`btn btn-${props.mode === 'light'?'dark':'primary'} mx-3`} onClick={handleClick4} >{props.buttonText4}</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").length - 1} Words and {text.length} Characters</p>\r\n                <p>Reading Time: {0.008 * (text.split(\" \").length - 1)} Mins</p>\r\n                <h4 className='my-2'>Preview</h4>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-small alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">  \r\n        <strong>{capitalize(props.alert.type)}  </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n// &&(and operator) ->first it will run (props.alert) if this runs successfully then it will run whole div otherwise if (props.alert) doesn't runs then it will also not run div (as simple as that)\r\n// in this case initially alert will be null so it will not run but as soon as we click on dark mode button props.alert will run and so is the remaining div \r\n\r\nexport default Alert\r\n","import Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textform from './components/Textform';\nimport { useState } from 'react';\nimport React  from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\n\nfunction App() {\n  // dark mode button\n  const [mode, setMode] = useState('light');\n  // it implies whether dark mode is enabled or not\n\n  // alert message\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 500);\n  }\n\n  // toggle (dark mode button)\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#22303c';\n      document.body.style.color = 'white';\n      showAlert('Dark Mode has been enabled', 'success');\n      document.title = 'TextUtils - Dark';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#171717';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Home';\n    }\n  }\n  // second toggle mode\n  const toggleMode2 = () => {\n    if (mode === 'light') {\n      setMode('secondary');\n      document.body.style.backgroundColor = '#343A40';\n      document.body.style.color = 'whitesmoke';\n      showAlert('Gray Mode has been enabled', 'success');\n      document.title = 'TextUtils - Gray';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#171717';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Home';\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" aboutText=\"About-us\" mode={mode} toggleMode={toggleMode} toggleMode2={toggleMode2} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          <Routes>\n            <Route exact path=\"/about\"\n            element={<About />}>\n            </Route>\n            <Route exact path=\"/\"\n              element={<Textform heading=\"Enter the text to analyze:\" mode={mode} showAlert={showAlert}  buttonText=\"UpperCase\" buttonText2=\"LowerCase\" buttonText3=\"Trim Spaces\" buttonText4=\"Clear Text\" toggleMode={toggleMode}/>}>\n            </Route>\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}